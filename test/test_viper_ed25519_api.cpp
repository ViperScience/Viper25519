#include <ed25519-viper/ed25519.hpp>
#include <ed25519-viper/curve25519.hpp>
#include <test/testing.hpp>

using namespace ed25519;

auto testKeyGen() -> void
{
    // Create a standard Ed25519 private key.
    auto key = PrivateKey::generate();
    TEST_ASSERT_THROW(key.isValid());
}

auto testExtendedKeyGen() -> void
{
    // Create an extended Ed25519 private key.
    auto ext_key = ExtendedPrivateKey::generate();
    TEST_ASSERT_THROW(ext_key.isValid());
}

auto testPublicKeyGen() -> void
{
    constexpr auto ext_prv_key_bytes =
        std::array<uint8_t, ED25519_EXTENDED_KEY_SIZE>{
            0x48, 0x4c, 0xc9, 0x24, 0x24, 0x16, 0x82, 0xbd, 0xc9, 0x8a, 0x7b,
            0x0b, 0xc4, 0x6f, 0xb9, 0x9c, 0x29, 0xc2, 0xca, 0xb7, 0x6f, 0xa6,
            0xc1, 0x37, 0x49, 0xab, 0x76, 0x0d, 0xfc, 0xfb, 0x63, 0x54, 0x8d,
            0xb8, 0x5e, 0xe5, 0xd4, 0x65, 0x38, 0x5c, 0xe6, 0x71, 0xe9, 0xc3,
            0xaa, 0x4e, 0x39, 0xf3, 0x18, 0x7a, 0xc2, 0x19, 0x94, 0x4d, 0xb1,
            0xeb, 0x75, 0xab, 0x0c, 0xc0, 0xdf, 0xb0, 0x3c, 0x77};
    const auto ext_prv_key = ExtendedPrivateKey(ext_prv_key_bytes);
    TEST_ASSERT_THROW(ext_prv_key.isValid());
    TEST_ASSERT_THROW(ext_prv_key.bytes() == ext_prv_key_bytes);

    constexpr auto ext_pub_key_bytes = std::array<uint8_t, ED25519_KEY_SIZE>{
        0xaf, 0x65, 0x50, 0xa2, 0x0d, 0x46, 0x89, 0xd5, 0x02, 0xb9, 0x42,
        0xb2, 0x5c, 0xad, 0xf4, 0xe9, 0xa9, 0xa4, 0x4c, 0xc5, 0xf4, 0xca,
        0x0d, 0xdf, 0x05, 0xf1, 0xf5, 0xb6, 0x24, 0x39, 0xd7, 0x69};
    const auto pub_key = PublicKey(ext_pub_key_bytes);
    TEST_ASSERT_THROW(pub_key.bytes() == ext_pub_key_bytes);
    TEST_ASSERT_THROW(ext_prv_key.publicKey().bytes() == pub_key.bytes());

    constexpr auto prv_key_bytes = std::array<uint8_t, ED25519_KEY_SIZE>{
        0x9d, 0x61, 0xb1, 0x9d, 0xef, 0xfd, 0x5a, 0x60, 0xba, 0x84, 0x4a,
        0xf4, 0x92, 0xec, 0x2c, 0xc4, 0x44, 0x49, 0xc5, 0x69, 0x7b, 0x32,
        0x69, 0x19, 0x70, 0x3b, 0xac, 0x03, 0x1c, 0xae, 0x7f, 0x60};
    const auto prv_key = PrivateKey(prv_key_bytes);
    TEST_ASSERT_THROW(prv_key.isValid());
    TEST_ASSERT_THROW(prv_key.bytes() == prv_key_bytes);

    constexpr auto pub_key_bytes = std::array<uint8_t, ED25519_KEY_SIZE>{
        0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe,
        0xd3, 0xc9, 0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6,
        0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a};
    const auto pub_key2 = PublicKey({pub_key_bytes.data(), 32});
    TEST_ASSERT_THROW(pub_key2.bytes() == pub_key_bytes);
    TEST_ASSERT_THROW(prv_key.publicKey().bytes() == pub_key2.bytes());
}

auto testBasicSignature() -> void
{
    constexpr auto prv_key_bytes = std::array<uint8_t, ED25519_KEY_SIZE>{
        0x9d, 0x61, 0xb1, 0x9d, 0xef, 0xfd, 0x5a, 0x60, 0xba, 0x84, 0x4a,
        0xf4, 0x92, 0xec, 0x2c, 0xc4, 0x44, 0x49, 0xc5, 0x69, 0x7b, 0x32,
        0x69, 0x19, 0x70, 0x3b, 0xac, 0x03, 0x1c, 0xae, 0x7f, 0x60};
    constexpr auto pub_key_bytes = std::array<uint8_t, ED25519_KEY_SIZE>{
        0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe,
        0xd3, 0xc9, 0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6,
        0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a};
    constexpr auto sig_bytes = std::array<uint8_t, ED25519_SIGNATURE_SIZE>{
        0xe5, 0x56, 0x43, 0x00, 0xc3, 0x60, 0xac, 0x72, 0x90, 0x86, 0xe2,
        0xcc, 0x80, 0x6e, 0x82, 0x8a, 0x84, 0x87, 0x7f, 0x1e, 0xb8, 0xe5,
        0xd9, 0x74, 0xd8, 0x73, 0xe0, 0x65, 0x22, 0x49, 0x01, 0x55, 0x5f,
        0xb8, 0x82, 0x15, 0x90, 0xa3, 0x3b, 0xac, 0xc6, 0x1e, 0x39, 0x70,
        0x1c, 0xf9, 0xb4, 0x6b, 0xd2, 0x5b, 0xf5, 0xf0, 0x59, 0x5b, 0xbe,
        0x24, 0x65, 0x51, 0x41, 0x43, 0x8e, 0x7a, 0x10, 0x0b};

    const auto prv_key = PrivateKey(prv_key_bytes);
    TEST_ASSERT_THROW(prv_key.isValid())

    // Test signing an empty message
    auto msg = std::vector<uint8_t>{};
    auto sig = prv_key.sign(msg);
    TEST_ASSERT_THROW(sig == sig_bytes)

    // Verify the signature
    const auto pub_key = PublicKey(pub_key_bytes);
    TEST_ASSERT_THROW(pub_key.verifySignature(msg, sig))
}

auto testAdvancedSignature() -> void
{
    constexpr auto prv_key_bytes = std::array<uint8_t, ED25519_KEY_SIZE>{
        0x72, 0xd4, 0xa5, 0x64, 0xca, 0x15, 0x49, 0x9b, 0x5e, 0x4e, 0x75,
        0xd8, 0xac, 0x0f, 0x28, 0x21, 0x7d, 0x32, 0x11, 0x4a, 0x0c, 0x64,
        0x9a, 0x7c, 0x8e, 0xaa, 0xdd, 0x0c, 0xc7, 0x8c, 0x52, 0x0b};
    constexpr auto pub_key_bytes = std::array<uint8_t, ED25519_KEY_SIZE>{
        0xc7, 0x66, 0xbd, 0x73, 0x83, 0x7c, 0x4f, 0xaa, 0x52, 0x15, 0x50,
        0x2f, 0x1e, 0xfc, 0x90, 0xc0, 0x03, 0xf7, 0x11, 0xbb, 0xef, 0x55,
        0x17, 0x00, 0x91, 0x02, 0x8a, 0x34, 0x49, 0x34, 0x08, 0xa9};
    constexpr auto sig_bytes = std::array<uint8_t, ED25519_SIGNATURE_SIZE>{
        0x8f, 0xc4, 0xf1, 0x79, 0x33, 0x0b, 0x64, 0x2d, 0xd8, 0x6c, 0xa9,
        0x36, 0x26, 0x51, 0xb8, 0x3b, 0x00, 0x6d, 0x83, 0x75, 0xcc, 0xef,
        0x81, 0x1d, 0x3c, 0x67, 0x06, 0xf9, 0x15, 0x94, 0x65, 0x1d, 0xf2,
        0x76, 0x99, 0x53, 0x72, 0x30, 0x46, 0xcc, 0xb9, 0xbf, 0xe6, 0x6a,
        0x66, 0x7e, 0x0d, 0x11, 0xfc, 0x3e, 0xa2, 0xd8, 0x22, 0x62, 0x34,
        0xfd, 0xd5, 0x16, 0x47, 0x65, 0x26, 0x0f, 0x7b, 0x05};

    const auto prv_key = PrivateKey(prv_key_bytes);
    TEST_ASSERT_THROW(prv_key.isValid())

    // Test signing the message
    constexpr auto msg_str = std::string_view{
        "\x6c\x7e\x7b\x62\xeb\x24\x4a\x45\xd7\x84\x36\xe2\x97\x0d\xcd\x6c\x0f"
        "\x7d\xb8\x22\x97\xa8\x61\x40\xea\x58\xdd\x22\xc2\x19\x5a\xdb\xc9\x56"
        "\xd4\xc4\xec\x05\x35\x4b\x21\xef\xe2\x4c\xfc\xfe\x10\xe1\x76\x22\x36"
        "\x88\x48\x18\x0d\x2c\x46\x80\xcc\x21\x5e\x8c\xee\xa6\xcc\xe2\x22\x16"
        "\x1f\x1e\x09\x22\x39\x25\x3b\x97\x46\xf7\x88\x7d\xf2\x42\x5a\xb5\xa8"
        "\x80\xbd\xba\x98\x15\x3b\xe7\x86\xdc\x83\x8c\xbe\xca\x01\x6b\x1d\x06"
        "\x52\x4b\xd6\xbf\xba\x80\x9a\x8b\xb3\x7a\xda\xb1\x5d\x42\x41\x5f\x86"
        "\xec\x03\x58\x36\x5e\xa8\x7b\x81\x50\xb0\x54\x41\xd9\xd4\x98\x46\x87"
        "\x14\x85\xca\xae\x6d\xe3\x59\x73\x6c\x27\x18\x97\x36\xd8\xf1\x76\x5f"
        "\x3e\x5c\x5f\x6b\x92\x16\x83\x96\x39\x0b\xee\x94\xcf\xbd"};
    auto sig = prv_key.sign(
        {reinterpret_cast<const uint8_t*>(msg_str.data()), msg_str.size()}
    );
    TEST_ASSERT_THROW(sig == sig_bytes)

    // Verify the signature
    const auto pub_key = PublicKey(pub_key_bytes);
    TEST_ASSERT_THROW(pub_key.verifySignature(
        {reinterpret_cast<const uint8_t*>(msg_str.data()), msg_str.size()}, sig
    ))
}

auto testBasepoint() -> void
{
    // result of the curve25519 scalarmult ((|255| * basepoint) * basepoint)...
    // 1024 times
    static constexpr auto curved25519_expected = std::array<uint8_t, 32>{
        0xac, 0xce, 0x24, 0xb1, 0xd4, 0xa2, 0x36, 0x21, 0x15, 0xe2, 0x3e,
        0x84, 0x3c, 0x23, 0x2b, 0x5f, 0x95, 0x6c, 0xc0, 0x7b, 0x95, 0x82,
        0xd7, 0x93, 0xd5, 0x19, 0xb6, 0xf1, 0xfb, 0x96, 0xd6, 0x04};

    auto csk = std::array<std::array<uint8_t, 32>, 2>{{{255}}};

    for (uint32_t i = 0; i < 1024; i++)
        csk[(i & 1) ^ 1] = curve25519::scalarmult_basepoint(csk[i & 1]);

    TEST_ASSERT_THROW(csk[0] == curved25519_expected)
}

auto main() -> int
{
    testKeyGen();
    testExtendedKeyGen();
    testPublicKeyGen();
    testBasicSignature();
    testAdvancedSignature();
    testBasepoint();
    return 0;
}